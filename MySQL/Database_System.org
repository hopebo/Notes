* Definitions
** SQL(sequel)
SQL is a collection of DML(Data Manipulation Language), DDL(Data Definition Language), DCL(Data Control Language).

- DML

Commands like insert update delete select, the things that actually manipulate the data.

- DDL

Create tables, define schemas.

- DCL

Security authorization

** Aggregtes
Functions that return a single value from a bag(unordered, duplicates allowed) of tuples: Max, Min, Avg, Count.

Aggregate functions can only be used in the *SELECT* ouput list.

COUNT, SUM, AVG support DISTINCT.

** GROUP BY
Project tuples into subsets and calculate aggregates against each subset.

Non-aggregated values in SELECT output clause must appear in GROUP BY clause.

** HAVING
Filters results based on aggregation computation. Like a WHERE clause for a GROUP BY.

** String Operations
|         | String Case | String Quotes |
|---------+-------------+---------------|
| Postgre | Sensitive   | Single Only   |
| MySQL   | Insensitive | Single/Double |

*** LIKE
LIKE is used for string matching. String-matching operators:

- '%' Matches any substring (including empty strings).
- '-' Match any one character.

** DATE/TIME Operations
Operations to manipulate and modify DATE/TIME attributes.

Can be used in either output and predicates.

** Output Control
*** ORDER BY
Order the output tuples by the values in one or more of their columns.

*** Limit (Unsorted)
Limit the # of tuples returned in output.

Can set an offset to return a "range".

** Nested Queries
Queries containing other queries. They are often difficult to optimize.

Inner queries can appear (almost) anywhere in query.

In this case:
#+begin_src sql
SELECT name FORM student
 WHERE sid IN (
   SELECT sid FROM enrolled
    WHERE cid = '15-445'
 )
#+end_src
For every single tuple in the outer query we execute the inner query over and over again.

** Window Functions
Performs a calculation across a set of tuples that related to a single row. Like an aggregation but tuples are not grouped into a single output tuples.

#+begin_src sql
SELECT .. FUNC-NAME(...) OVER(...)
  FROM tableName
#+end_src

It's like combining the aggregation and the group by but in a single clause so the function is like the aggregation function and the over is like the group by.

- Aggregation functions
- Special window functions:
  - ROW_NUMBER() # of the current row.
  - RANK() Order position of the current row.

The OVER keyword specifies how to group together tuples when computing the window function.

Use PARTITION BY to specify group.

** Common Table Expressions(CTE)
Provides a way to write auxiliaxy statements for use in a larger query.

- Think of it like a temp table just for one query

Alternative to nested queries and views.
